sudo apt-get python
sudo apt-get install python
sudo apt-get install python3
python --version
python3 --version
perl -v
pidof keepassxc
kill 23156
printenv > /tmp/tmp-9381DNxExAo91jMMtxt
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889
ubuntu -v
echo "deb http://miktex.org/download/ubuntu focal universe" | sudo tee /etc/apt/sources.list.d/miktex.list
sudo apt-get update
sudo apt-get install miktex
miktexsetup
sudo apt-get update
sudo apt-get install miktex
latex --version
sudo apt install texlive-latex-extra
latex --version
sudo apt-key del D6BC243565B2087BC3F897C9277A7293F59E488
cd /etc/apt/sources.list.d/miktex.list
cd /etc/apt/sources.list.d/
ls

ls
cd /etc/apt/sources.list.d/miktex.list
cd /etc/apt/sources.list.d/
rm miktex.list
sudo rm miktex.list
ls
clear
sudo apt-get update
sudo apt-get update && apt-get upgrade
sudo apt-get update && sudo apt-get upgrade
clear
ls
cd Downloads/
ls
sudo chmod +x Anaconda3-2022.05-Linux-x86_64.sh
sudo ./Anaconda3-2022.05-Linux-x86_64.sh
conda -v
anaconda --version
conda -v
jupyter
anaconda innit
anaconda3
jupyter
sudo apt-get update && sudo apt-get upgrade
clear
cd ..
anaconda
conda
conda3
anaconda3
pip
pip3
cd Downloads/
sudo ./Anaconda3-2022.05-Linux-x86_64.sh
echo $PATH
conda -v
echo $PATH
spyder
Users/opt/motioblur/anaconda3/bin/
/home/Users/opt/motioblur/anaconda3/bin/
sudo ./Anaconda3-2022.05-Linux-x86_64.sh
cd Downloads/
ls
sudo ./Anaconda3-2022.05-Linux-x86_64.sh
cd /root/anaconda
sudo }cd /root/anaconda
sudo cd /root/anaconda
cd /root/anaconda
}cd /
cd /
ls
cd -s /root/anaconda
conda
conda innit
python --version
python3 --version
cd home
cd Users
ls
cd ..
ls
cd opt
ls
cd bin}
cd bin
ls -a
ls -l
ls -t
ls
cd ..
ls
ls -l
cd home
ls
cd motioblur
ls
cd Downloads
ls
dolphin
nautilus
cd /root/
su
sudo
su
su -c cd /root/
sudo -c cd /root/
sudo -c "cd /root/"
nautilus
cd /
clear
sudo su
clear
source /etc/environment
ls
cd etc/environment
cd etc/
ls
nano environment
cd /
sudo su cd /root
sudo su
clear
cd home/Downloads
ls
cd home/
ls
cd motioblur
ls
cd Downloads
ls
./Anaconda3-2022.05-Linux-x86_64.sh
conda --version
echo $PATH
cd ..
ls
cd anaconda
cd anaconda3
conda --version
ls
cd bin
ls
conda --version
./conda
pwd
./activate
conda init
conda
conda --version
logout
exit
$fprintd-enroll
sudo apt install qt5ct >
sudo apt install qt5ct
sudo apt remove qt5ct
clear
pwd
ls
conda -v
conda --version
clear
ping google.com
clear
cal
sudo apt install ncal
cal
cal -y
sudo apt install airgeddon
python3 --version
clear
pwd
ls
cd DEsktop
cd Desktop
cd google-drive://carlosvite@ciencias.unam.mx/0AOqNuagtWcbWUk9PVA/1cGJm_8Qslv2vqw1GzjIGIzwo31wWws8E/1cnQzO-PHx3e_G22m33JENSxsdHf0t7j3/17JqoQV_xHtrp07Gqua2JwpmPSU1o4lvX
clear
mkdir Git Clone Jupyter
cd Git Clone Jupyter
cd GitCloneJupyter
mkdir GitCloneJupyter
ls
rm -r Git Clone Jupyter
ls
cd GitCloneJupyter
ls
clear
git clone https://github.com/saac/Computacion2022-8099.git
sudo apt install git
git clone https://github.com/saac/Computacion2022-8099.git
ls
cd Computacion2022-8099
ls
cd SistemaOperativo_LINUX
ls
conda 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
jupyter 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
python3 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
jupyter
python3 -m pip install ipykernel
ipykernel 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
jupyter 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
clear
ls
jupyter notebook 1-LINUX_PrimerosComandosBasicos-ManejoArchivos.ipynb
jupter notebook
jupyter notebook
pwd
pip install bash_kernel
python -m bash_kernel.install
source deactivate py3k
conda create -n py3k python=3 ipython notebook
# now you need to activate the python 3 environment
source activate py3k
conda activate py3k
pip install bash_kernel
python -m bash_kernel.install
source deactivate py3k
conda  deactivate py3k
conda deactivate py3k
conda deactivate
conda activate
cd /home/motioblur/Desktop/GitCloneJupyter/Computacion2022-8099/SistemaOperativo_LINUX
git status
jupyter notebook
conda deactivate
clear
git pull
ls
git pull
latex
latex /v
latex -v
sudo apt-get update
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889
echo "deb http://miktex.org/download/ubuntu bionic universe" | sudo tee /etc/apt/sources.list.d/miktex.list
[200~sudo apt-get update
sudo apt-get install miktex
sudo apt-get update
sudo apt-get install miktex
deb [arch=amd64] http://miktex.org/download/ubuntu xenial universe~
echo "deb [arch=amd64] http://miktex.org/download/ubuntu xenial universe" | sudo tee /etc/apt/sources.list.d/miktex.list
sudo apt-get install miktex
sudo apt-get update
sudo apt-key del D6BC243565B2087BC3F897C9277A7293F59E4889
nano /etc/apt/sources.list
cd /etc/apt/sources.list.d
ls
rm miktex.list
sudo rm miktex.list
ls
clear
cd /home
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889
echo "deb http://miktex.org/download/ubuntu xenial universe" | sudo tee /etc/apt/sources.list.d/miktex.list
sudo apt-get update
sudo apt-get install texlive-full 
vscode
vcode
code
cal 9 1752
cal -j 2005
cal 1234
clear
ajkf
vs
eve
vs
v
sev
esv
clear
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
whoami
echo $?
cal
echo $?
git pull
jupyter notebook
pip list
clear
pip install bash_kernel
python -m bashkernel.install
python -m bash_kernel.install
clear
jupyter notebook
clear
sudo apt install julia
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
jupyter notebook
sudo apt-get install chntpw
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
jupyter notebook
sudo jupyter notebook
ls
tar xzf julia-1.6.7-linux-x86_64.tar.gz
ls
cd julia-1.6.7
ls
cd ..
ls
sudo mv julia-1.6.7/ /opt/
cd /opt/
ls
cd ..
sudo ln -s /opt/julia-1.6.4/bin/julia /usr/local/bin/julia
julia
sudo ln -s /opt/julia-1.6.7/bin/julia /usr/local/bin/julia
cd /usr/local/bin/
ls
rm julia
sudo rm julia
ls
sudo ln -s /opt/julia-1.6.7/bin/julia /usr/local/bin/julia
julia
cd /
tree /
sudo apt install tree
tree /
; clear
clear
uname -a
clear
ls
cd /Home/Desktop
git status
cd ../..
pwd
ls
clear
git status
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir Vite/Riveros/Carlos/Emilio
echo $?
mkdir -r Vite/Riveros/Carlos/Emilio
echo $?
mkdir -p Vite/Riveros/Carlos/Emilio
echo $?
touch ./Vite/archivo1 /Riveros/Archivo2 /Carlos/Archivo3 /Emilio/Archivo4
echo $?
touch ./Vite/archivo1 ./Riveros/Archivo2 ./Carlos/Archivo3 ./Emilio/Archivo4
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/archivo4
echo $?
cd ./Vite/Riveros/Carlos
ls -R
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos
ls -R
echo $?
cd ./Vite/Riveros/Carlos && ls -R
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
cd ./Vite/Riveros/Carlos && ls -R
echo $?
cd ../.. && pwd
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
cd ../.. && mkdir -p respaldo_sistema/ configuracion/x11/ configuracion/gnome/ programas/ reinstalacion/ usuarios/python/scripts
echo $?
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/ configuracion/x11/ configuracion/gnome/ programas/ reinstalacion/ usuarios/python/scripts
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/ configuracion/x11/ configuracion/gnome/ programas/ reinstalacion/ usuarios/python/scripts
echo $?
cd reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd programas && cp /bin .
echo $?
cd .. && cd programas && cp /bin .
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/ configuracion/x11/ configuracion/gnome/ programas/ reinstalacion/ usuarios/python/scripts
echo $?
cd reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
echo "Hola" > hola.txt
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/
echo $?
echo "Hola" > hola.txt
echo $?
echo "Hola" > hola.txt
echo $?
cat
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/ configuracion/x11/ configuracion/gnome/ programas/ reinstalacion/ usuarios/python/scripts
echo $?
cd reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
echo "Hola" > hola.txt
echo $?
pwd
echo $?
git pull
ls
clear
ls
cd ..
ls
cd Practica
ld
ls
cd Practicas
ls
jupyter notebook
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
echo "Hola" > hola.txt
echo $?
echo "de nuevo" > hola_.txt && cat hola.txt hola_.txt > hola2.txt && del hola_.txt
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../.. && echo "Hola" > hola.txt
echo $?
echo "de nuevo" > hola_.txt && cat hola.txt hola_.txt > hola2.txt && rm hola_.txt
echo $?
cat (head -c 37 .bashrc) (tail -c 23 .bash_history) > PEGADO.txt
echo $?
jupyter notebook --generate-config~
cd /
ls -A
ls -a
ls -r
cd ~
ls -a
cd .jupyter
ls
cd /home
clear
jupyter notebook --generate-config
cd motioblur/.jupyter/
ls
vscode jupyter_notebook_config.py
code jupyter_notebook_config.py
ls -R
cd ..
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
echo "de nuevo" > hola_.txt && cat hola.txt hola_.txt > hola2.txt && rm hola_.txt
echo $?
head -c 37 .\bashrc > primero.txt && tail -c 23 .\bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
head -c 37 .bashrc > primero.txt && tail -c 23 .bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
head -c 37 /home/.bashrc > primero.txt && tail -c 23 /home/.bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
head -c 37 ~/.bashrc > primero.txt && tail -c 23 /home/.bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
head -c 37 ~/.bashrc > primero.txt && tail -c 23 .bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
head -c 37 ~/.bashrc > primero.txt && tail -c 23 ~/.bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
ls -R
nano .\bashrc
nano .\bash_rc
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
echo "de nuevo" > hola_.txt && cat hola.txt hola_.txt > hola2.txt && rm hola_.txt
echo $?
head -n 37 ~/.bashrc > primero.txt && tail -n 23 ~/.bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio #mkdir crea los directorios y la opción -p los crea de manera recursiva.
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R #El archivo con un punto inicial se ocultó. La opción -R hace que se pueda ver el archivo oculto
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd .. && cd programas && cp -r /bin .
echo $?
cd .. && cd configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
echo "de nuevo" > hola_.txt && cat hola.txt hola_.txt > hola2.txt && rm hola_.txt
echo $?
head -n 37 ~/.bashrc > primero.txt && tail -n 23 ~/.bash_history > segundo.txt
cat primero.txt segundo.txt > PEGADO.txt && rm primero.txt segundo.txt
echo $?
timedatectl set-local-rtc 1
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd ../programas && cp -r /bin .
echo $?
cd ../configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
cp hola.txt ./hola2.txt && echo "de nuevo" >> hola2.txt
echo $?
head -n 37 ~/.bashrc >> PEGADO.txt && tail -n 23 ~/.bash_history >> PEGADO.txt
echo $?
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/.archivo3 ./Vite/Riveros/Carlos/Emilio/archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd ../programas && cp -r /bin .
echo $?
cd ../configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
cp hola.txt ./hola2.txt && echo "de nuevo" >> hola2.txt
echo $?
head -n 37 ~/.bashrc >> PEGADO.txt && tail -n 23 ~/.bash_history >> PEGADO.txt
echo $?
head -n 37 ./.bashrc >> PEGADO.txt
head -n 37 ~/.bashrc >> PEGADO.txt
tail -n 23 ~/.bash_history >> PEGADO.txt
cd ~
pwd
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
mkdir -p Vite/Riveros/Carlos/Emilio
echo $?
touch ./Vite/archivo1 ./Vite/Riveros/archivo2 ./Vite/Riveros/Carlos/archivo3 ./Vite/Riveros/Carlos/Emilio/.archivo4
echo $?
cd ./Vite/Riveros/Carlos && ls -R
echo $?
cd ../.. && mkdir -p respaldo_sistema/configuracion/X11/ respaldo_sistema/configuracion/gnome/ respaldo_sistema/programas/ respaldo_sistema/reinstalacion/ respaldo_sistema/usuarios/python/scripts
echo $?
cd respaldo_sistema/reinstalacion/ && touch guia notas secuencia.data paquetes.pkg imagen.iso
echo $?
cd ../programas && cp -r /bin .
echo $?
cd ../configuracion/X11 && cp -r /etc/X11/ .
echo $?
cd ../../.. && echo "Hola" > hola.txt
echo $?
cp hola.txt ./hola2.txt && echo "de nuevo" >> hola2.txt
echo $?
head -n 37 ~/.bashrc >> PEGADO.txt && tail -n 23 ~/.bash_history >> PEGADO.txt
echo $?
jupyter notebook
git status
jupyter notebook
ls
cd Desktop/
ls
cd GitCloneJupyter/
ls
cd Computacion2022-8099/
cd
ls
cd Desktop/
cd GitCloneJupyter/
cd Computacion2022-8099/
ls
less apt.txt
cd Practicas/
ls
cd Practica\ 1/
ls
file Practica1.ipynb 
cd
clear
tree
clear
ls
cd -
cd /
man alias
alias --help
alias [pit[ls *.py]]
alias pit ls *.py
alias pit="ls *.py"
pit
touch hola.py hi.py hirvsr.py
cd 
touch hola.py hi.py hirvsr.py
pit
rm *.py
pit
alias pit="ls -R *.py"
pit
mkdir -r python/{hola/nono, hi/gare, no/kfn}
mkdir python/{hola/nono, hi/gare, no/kfn}
man mkdir
mkdir -p python/{hola/nono, hi/gare, no/kfn}
tree
clear
tree python
cd pyhton
cd python/
ls
cd \{hola/
ls
cd nono,/
ls
cd ../..
pwd
cd ..
ls
rm -r python/{hola/nono, hi/gare, no/kfn}
ls
rm -r hi
rm -r no
ls
ls -lh
cd python
ls
rm -r python
ls
cd ..
ls
rm -r python/
ls
ls -lh
clear
man ls
pit
cd /
pit -R
alias pit="ls -R *.py"
pit
cd 
pit
alias pit="ls -R *.txt"
pit
man ls
ls -R
clear
ls -lh
ls -lhR
ls -lhRd
ls
pwd
man ls
ls -R *.txt
cd /
ls -R *.txt
ls */*.txt
cd
ls */*.txt
cd /
find . -type f -name "*.txt"
cd
mkdir ifiles && cd ifiles
for i in "seq 5"; do touch file$i.txt; done
ls
for i in 'seq 5'; do touch file$i.txt; done
ls
for i in '1 2 3 4 5'; do touch file$i.txt; done
ls
for i in '1 2 3 4 5'; do touch "file$i.txt"; done
ls
for i in {1..5}; do touch file$i.txt; done
ls
rm -r *
ls
for i in {1..5}; do touch file$i.txt; done
ls
cd ..
ls
rm -r ifiles/
ls
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
cd Desktop/
cd GitCloneJupyter/
cd Computacion2022-8099/
ls
jupyter notebook
sudo apt install cowsay
sudo apt install lolcat
clear
cowsay "hola"
echo "HOla a todos" | lolcat
for i in {1..10}; do echo "HOla a todos" | |lolcat; done
for i in {1..1000}; do echo "HOla a todos" | lolcat; done
clear
echo "HOla a todos" | cowsay |lolcat
for i in {1..10}; do echo "HOla a todos" | cowsay |lolcat; done
for i in {1..1000}; do echo "HOla a todos" | cowsay |lolcat; done
clear
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
cd Desktop/
cd GitCloneJupyter/
cd Computacion2022-8099/
ls
jupyter notebook
clear
exit
clear
for i in {1..100}; do cowsay "te hackie" | lolcat; done
clear
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
cd Desktop/
cd
cd Desktop/
cd GitCloneJupyter/ 
cd Computacion2022-8099/
ls
git remote -v
git pull
jupyter notebook
git pull
code Practica1.ipynb
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
for i in {1..1000}; do cowsay "hola xd" | lolcat; done
ps
ps -u root
clear
ps -f
clear
ps -fea
clear
top
htop
apt get install htop
apt install htop
sudo apt install htop
htop
jobs
jobs -l
htop
apt install jobs
sudo apt install jobs
htop
pgrep jupyter
kill 12033
jupyter notebook
jupyter notebook & disown
cd Desktop/
cd GitCloneJupyter/
cd Computacion2022-8099/
jupyter notebook & disown
exit
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
jobs
pgrep jupyter
kill 13407 15592
cd Desktop/
cd GitCloneJupyter/
cd Computacion2022-8099/
jupyter notebook
jupyter notebook &
ls
wrd apt.txt
wod apt.txt 
more apt.txt 
more
wc apt.txt 
cat -n apt.txt 
wc apt.txt 
cler
clear
who
exit
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
PS1='[PEXP\[\]ECT_PROMPT>' PS2='[PEXP\[\]ECT_PROMPT+' PROMPT_COMMAND=''
export PAGER=cat
bind 'set enable-bracketed-paste off' >/dev/null 2>&1 || true
display () {     TMPFILE=$(mktemp ${TMPDIR-/tmp}/bash_kernel.XXXXXXXXXX);     cat > $TMPFILE;     echo "bash_kernel: saved image data to: $TMPFILE" >&2; }
pgrep JUpyter
pgrep Jupyter
pgrep jupyter
kill 16119
jupyter notebook
jupyter notebook &
logout
cd /
ls
cd bin
ls
exit
htop
git config --global user.name "motioblur@porkbikelin"
git config --global user.name
git config --global user.email "54517058+motioblur@users.noreply.github.com"
git config --global user.email 
